[
  {
    "id": "appdefect-1",
    "question": "애플리케이션 실행 중 예기치 않은 오류가 발생했을 때, 해당 오류의 원인을 분석하고 수정하는 일련의 작업은 무엇인가?",
    "answer": "디버깅",
    "example": "",
    "difficulty": 2
  },
  {
    "id": "appdefect-2",
    "question": "다음 중 예외 처리(Exception Handling)에 대한 설명으로 옳은 것을 고르시오.",
    "answer": "3",
    "example": "1. 프로그램의 성능을 향상시키는 과정\n2. 오류가 발생한 위치에서 프로그램을 강제 종료하는 방식\n3. 오류 발생 시 프로그램이 비정상 종료되지 않도록 처리하는 방식\n4. UI 디자인을 구성하는 방식",
    "difficulty": 3
  },
  {
    "id": "appdefect-3",
    "question": "소프트웨어에 발생한 오류를 수정한 후, 그 수정이 다른 기능에 영향을 미쳤는지를 확인하기 위해 반복해서 수행하는 테스트는 무엇인가?",
    "answer": "회귀 테스트",
    "example": "",
    "difficulty": 3
  },
  {
    "id": "appdefect-4",
    "question": "다음 중 결함(버그)을 추적하고 기록하는 시스템이나 도구의 핵심 기능이 아닌 것은?",
    "answer": "2",
    "example": "1. 오류 발생 시간 기록\n2. 코드 자동 최적화\n3. 오류 발생 위치 기록\n4. 오류 내용 설명 및 로그 저장",
    "difficulty": 3
  },
  {
    "id": "appdefect-5",
    "question": "운영 중 긴급하게 발견된 결함을 빠르게 수정하고 전체 배포 없이 일부분만 즉시 반영하는 수정 방식은 무엇인가?",
    "answer": "핫픽스",
    "example": "",
    "difficulty": 2
  },
  {
    "id": "appdefect-6",
    "question": "다음 중 개발자가 오류를 분석할 때 가장 먼저 참고하는 로그 파일로, 실행 중 발생한 예외나 상태 정보 등을 기록하는 것은 무엇인가?",
    "answer": "에러 로그",
    "example": "",
    "difficulty": 2
  },
  {
    "id": "appdefect-7",
    "question": "결함 발생 시, 어떤 상황에서 어떤 조건에서 발생했는지를 기록해 재현 가능하게 만드는 활동은 무엇인가?",
    "answer": "결함 재현",
    "example": "",
    "difficulty": 3
  },
  {
    "id": "appdefect-8",
    "question": "다음 중 회귀 테스트가 필요한 상황으로 가장 적절한 것을 고르시오.",
    "answer": "3",
    "example": "1. 전체 시스템 신규 개발 완료 후\n2. 네트워크 환경이 변경되었을 때\n3. 기능 하나가 수정되었을 때\n4. 서버가 교체되었을 때",
    "difficulty": 3
  },
  {
    "id": "appdefect-9",
    "question": "소프트웨어 결함이 계속 반복되는 경우, 그 원인을 근본적으로 분석하여 해결하는 방식은 무엇인가?",
    "answer": "근본 원인 분석",
    "example": "",
    "difficulty": 4
  },
  {
    "id": "appdefect-10",
    "question": "다음 중 디버깅 도구에서 제공하는 기능으로 옳은 것을 고르시오.",
    "answer": "2",
    "example": "1. 코드 자동 번역\n2. 중단점 설정 및 변수 값 추적\n3. UI 자동 생성\n4. 테스트 문서 자동 출력",
    "difficulty": 3
  },
  {
    "id": "appdefect-11",
    "question": "개발 중 변수 값의 변화를 확인하고 함수 호출 흐름을 따라가며 오류를 추적하는 기법은 무엇인가?",
    "answer": "단계별 실행",
    "example": "",
    "difficulty": 3
  },
  {
    "id": "appdefect-12",
    "question": "다음 중 소프트웨어에서 발생한 오류를 발견한 뒤, 그 오류를 정리하여 문서 형태로 보고하는 문서는 무엇인가?",
    "answer": "결함 보고서",
    "example": "",
    "difficulty": 3
  },
  {
    "id": "appdefect-13",
    "question": "디버깅 시 특정 조건이 만족될 경우에만 중단점을 작동시키는 방식은 무엇인가?",
    "answer": "조건부 중단점",
    "example": "",
    "difficulty": 4
  },
  {
    "id": "appdefect-14",
    "question": "다음 중 테스트 자동화 도구의 사용으로 기대할 수 있는 효과는?",
    "answer": "3",
    "example": "1. 인건비 증가\n2. 오류 발생률 증가\n3. 테스트 반복 수행의 효율성 향상\n4. 소스코드 해킹 방지",
    "difficulty": 3
  },
  {
    "id": "appdefect-15",
    "question": "결함의 원인을 찾기 위해 에러가 발생한 로그 시점부터 프로그램의 실행 흐름을 분석하는 작업은 무엇인가?",
    "answer": "장애 분석",
    "example": "",
    "difficulty": 4
  },
  {
    "id": "appdefect-16",
    "question": "코드 상의 오류뿐만 아니라 논리적 오류를 발견하기 위해, 소스 코드를 컴파일 없이 분석하는 기법은 무엇인가?",
    "answer": "정적 분석",
    "example": "",
    "difficulty": 4
  },
  {
    "id": "appdefect-17",
    "question": "테스트 도중 발견된 결함이 다른 기능이나 모듈에도 영향을 미치며 새로운 오류를 유발하는 현상은 무엇인가?",
    "answer": "결함 전이",
    "example": "",
    "difficulty": 4
  },
  {
    "id": "appdefect-18",
    "question": "다음 중 개발자가 자주 반복하는 실수를 줄이기 위한 예방 조치로 적절한 것은?",
    "answer": "결함 예방 교육",
    "example": "",
    "difficulty": 3
  },
  {
    "id": "appdefect-19",
    "question": "오류 발생 시 자동으로 해당 내용을 관리자나 담당자에게 전달하는 시스템 구성 요소는 무엇인가?",
    "answer": "에러 감시 모듈",
    "example": "",
    "difficulty": 4
  },
  {
    "id": "appdefect-20",
    "question": "테스트 중 발생한 오류의 발생 시간, 위치, 환경, 증상 등을 포함하여 정리한 보고 자료는 무엇인가?",
    "answer": "버그 리포트",
    "example": "",
    "difficulty": 3
  }
]
