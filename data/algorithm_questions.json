[
  {
    "id": "algorithm-1",
    "question": "정렬되지 않은 데이터에서 가장 작은 값을 선택하여 맨 앞으로 이동시키고, 이를 반복하여 전체 데이터를 정렬하는 방식의 이름은 무엇인가?",
    "answer": "선택 정렬",
    "example": "",
    "difficulty": 1
  },
  {
    "id": "algorithm-2",
    "question": "다음 중 정렬된 데이터에만 적용 가능한 탐색 알고리즘을 고르시오.",
    "answer": "2",
    "example": "1. 순차 탐색\n2. 이진 탐색\n3. 해시 탐색\n4. 너비 우선 탐색",
    "difficulty": 1
  },
  {
    "id": "algorithm-3",
    "question": "하나의 배열을 반으로 나누고 각 부분을 재귀적으로 정렬한 후 병합하여 정렬을 완성하는 분할 정복 기반의 정렬 알고리즘은 무엇인가?",
    "answer": "병합 정렬",
    "example": "",
    "difficulty": 2
  },
  {
    "id": "algorithm-4",
    "question": "다음 중 정렬 알고리즘 중 평균적인 시간 복잡도가 가장 좋은 알고리즘을 고르시오.",
    "answer": "3",
    "example": "1. 선택 정렬\n2. 버블 정렬\n3. 퀵 정렬\n4. 삽입 정렬",
    "difficulty": 2
  },
  {
    "id": "algorithm-5",
    "question": "주어진 배열에서 왼쪽부터 오른쪽으로 이동하면서, 앞에서부터 하나씩 값을 비교해 특정 값을 찾는 가장 기본적인 탐색 알고리즘은 무엇인가?",
    "answer": "순차 탐색",
    "example": "",
    "difficulty": 1
  },
  {
    "id": "algorithm-6",
    "question": "다음 중 스택(Stack) 자료구조의 특징으로 올바른 것을 모두 고르시오.",
    "answer": "2, 3",
    "example": "1. FIFO 구조\n2. LIFO 구조\n3. 후입선출 방식\n4. 큐와 동일한 구조",
    "difficulty": 2
  },
  {
    "id": "algorithm-7",
    "question": "배열이나 문자열의 양 끝에서 포인터를 시작하여 가운데로 접근하면서 조건을 만족하는지 확인하는 탐색 알고리즘 기법은 무엇인가?",
    "answer": "투 포인터",
    "example": "",
    "difficulty": 2
  },
  {
    "id": "algorithm-8",
    "question": "다음 중 재귀(Recursive) 호출이 주로 사용되는 문제 유형을 모두 고르시오.",
    "answer": "1, 2",
    "example": "1. 피보나치 수열\n2. 팩토리얼 계산\n3. 정렬\n4. 순차 탐색",
    "difficulty": 1
  },
  {
    "id": "algorithm-9",
    "question": "하나의 수열에서 특정 위치 기준으로 좌우로 분할하여, 왼쪽에는 기준보다 작은 수, 오른쪽에는 큰 수를 배치하는 방식으로 정렬을 수행하는 알고리즘은 무엇인가?",
    "answer": "퀵 정렬",
    "example": "",
    "difficulty": 2
  },
  {
    "id": "algorithm-10",
    "question": "다음 중 너비 우선 탐색(BFS) 의 특징으로 올바른 설명을 고르시오.",
    "answer": "3",
    "example": "1. 재귀 호출로 구현된다\n2. 가장 깊은 노드부터 탐색한다\n3. 큐(Queue)를 사용한다\n4. 스택(Stack)을 사용한다",
    "difficulty": 2
  },
  {
    "id": "algorithm-11",
    "question": "주어진 정수 배열에서 특정 구간의 합을 반복적으로 빠르게 계산해야 하는 경우, 각 위치까지의 합을 미리 저장해두고 사용하는 기법은 무엇인가?",
    "answer": "누적 합 (Prefix Sum)",
    "example": "",
    "difficulty": 2
  },
  {
    "id": "algorithm-12",
    "question": "다음 중 삽입 정렬의 동작 방식에 대한 설명으로 옳은 것을 고르시오.",
    "answer": "2",
    "example": "1. 항상 양쪽에서 정렬\n2. 새로운 값을 정렬된 위치에 끼워 넣음\n3. 값을 하나씩 제거\n4. 정렬된 두 그룹을 병합",
    "difficulty": 2
  },
  {
    "id": "algorithm-13",
    "question": "주어진 숫자 n에 대해 n! (팩토리얼) 을 계산하기 위한 알고리즘에서 반복문 대신 자기 자신을 호출하는 방식은 어떤 개념인가?",
    "answer": "재귀 호출",
    "example": "",
    "difficulty": 1
  },
  {
    "id": "algorithm-14",
    "question": "정렬된 배열에서 특정 값을 찾을 때, 범위를 절반으로 줄이며 탐색 속도를 높이는 알고리즘은 무엇인가?",
    "answer": "이진 탐색",
    "example": "",
    "difficulty": 1
  },
  {
    "id": "algorithm-15",
    "question": "다음 중 동적 계획법(DP) 을 사용해야 하는 문제의 조건으로 가장 적절한 것을 고르시오.",
    "answer": "2",
    "example": "1. 반복이 없는 단순 계산\n2. 이전 결과를 그대로 활용\n3. 오직 정렬 문제\n4. 재귀함수 사용 금지",
    "difficulty": 2
  },
  {
    "id": "algorithm-16",
    "question": "배열의 원소를 반복적으로 인접한 값과 비교하고, 크면 교환하며 전체를 정렬하는 알고리즘은 무엇인가?",
    "answer": "버블 정렬",
    "example": "",
    "difficulty": 1
  },
  {
    "id": "algorithm-17",
    "question": "다음 중 그래프 탐색에서 DFS(깊이 우선 탐색) 의 특성으로 가장 적절한 설명을 고르시오.",
    "answer": "3",
    "example": "1. 가까운 노드부터 탐색\n2. 큐를 사용\n3. 스택 또는 재귀로 구현\n4. 전 노드를 동시에 탐색",
    "difficulty": 2
  },
  {
    "id": "algorithm-18",
    "question": "배열에서 최대값을 구하는 알고리즘을 설계하려 한다. 반복문을 사용하여 순차적으로 값을 비교하고 최대값을 저장하는 방식은 어떤 유형의 알고리즘인가?",
    "answer": "선형 탐색",
    "example": "",
    "difficulty": 1
  },
  {
    "id": "algorithm-19",
    "question": "다음 중 정렬된 배열에서 원하는 값 이상이 처음 등장하는 위치를 찾는 데 사용하는 이진 탐색 기반 기법은?",
    "answer": "Lower Bound",
    "example": "",
    "difficulty": 2
  },
  {
    "id": "algorithm-20",
    "question": "다음 중 알고리즘 문제 해결 전략 중 분할 정복(Divide and Conquer) 기법에 해당하는 것을 모두 고르시오.",
    "answer": "1, 2, 4",
    "example": "1. 병합 정렬\n2. 퀵 정렬\n3. 삽입 정렬\n4. 이진 탐색",
    "difficulty": 3
  }
]
